5
: _assert1 _assert s ;
s
User 
infixOn
: hi ( | x -- x ) x = ( 2 + ( 3 * 4 ) ) x @ p ; 
' hi find wdiss
hi 14 _assert1
s
: hi1 ( a b | x -- x ) x = 2 + ( ( a @ ) / ( b @ ) ) * ( 3 * 4 ) ; 
' hi1 find wdiss
6 3 hi1 dup p 48 _assert1
10 5 hi1 dup p 48 _assert1
: hi2 ( a b | x -- x ) ( x = ( ( ( ( 2 + ( ( a @ ) / ( b @ ) ) ) * ( ( 3 * 4 ) ) ) ) ) ) ; 
' hi2 find wdiss
6 3 hi2 dup p 48 _assert1
10 5 hi2 dup p 48 _assert1
: h3 ( a b | x -- x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( ( a @ ) / ( b @ ) ) ) ) ) ) ) ; 
' h3 find wdiss
6 3 h3 dup p 12 _assert1
10 5 h3 dup p 12 _assert1
: h4 ( a b | x -- x ) x = ( 20 - ( 3 * 4 ) - ( ( a @ ) / ( b @ ) ) ) ; 
' h4 find wdiss
6 3 h4 dup p 6 _assert1
10 5 h4 dup p 6 _assert1

3 ( x ) { x @ dup p } ix 
"\nabove line should read 3" ps //pause

infixOff
2 + 7 assertStkChk // stack checking
s
