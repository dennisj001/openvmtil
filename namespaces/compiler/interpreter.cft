
5 
System Interpreter 
: sp ; //stack pause ;
// : #! ' // xt@ compile ; // for script files with first line as "#! cfrtil -s"
// : token { nextChar ' ' !=  } {  } 
infixOn
#if 0 // this interpreter can't do c syntax
: interpretNextToken ( | atoken aword ) 
    token atoken store 
    { atoken @ != 0 }
    {       
        atoken @ find aword store 
        { aword @ != 0 } 
        { 
            aword @ setupWordEval 
            { ( compileMode_get not ) || ( ?immediate (aword @) ) }
            { aword @ definition iax } 
            { aword @ _compileWord }
            ifElse
        } 
        { atoken @ literalInterpret } 
        ifElse
    }       
    if
;

: interpret 
    interpreterInit 
    { interpreterIsDone == 0 } 
    { 
        interpretNextToken 
    } 
    while
;
interpret
#endif
sp
c_syntaxOn
void
testc1 ( | atoken aword ) 
{
    int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; 
    int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; 
    ps ( "\ntdbg =" ) ; p ( tdbg ) ; 
    ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; 
    ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; //pause () ;
    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; 
    ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; 
    ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; //pause () ;
}
testc1 () ; //pause 

void
interpret2 ( | atoken aword ) 
{
    //nl() ; tab () ; ps ( "interpret2 :> " ) ; nl () ;
    while ( 1 )
    {   
        atoken = token () ; 
        //printf ( "\n\ttoken = %s", atoken ) ; 
        if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        { 
            return ; 
        }
        else
        {
            if ( atoken )
            {       
                // printf ( "\n\ttoken = %s", atoken ) ; 
                aword = find ( atoken ) ; 
                if ( aword )
                { 
                    doMorphismWord ( aword ) ; // can do it all -- compile itself, c syntax, etc.
                } 
                else 
                { 
                    literalInterpret (atoken ) ;
                } 
            }       
        }
    }
}
' interpret2 wdiss 
sp
interpret2 
c_syntaxOff sp
#if 1
: hi1 1 2 + p ;  
: hey1 hi1 hi1 ; 
: heey1 hey1 hey1 hey1 ;
nl heey1 
#endif
i2halt
"C_Combinators" notUsing
infixOff
sp
2 + 7 assertStkChk // stack checking

