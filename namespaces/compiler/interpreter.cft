

5 

System Interpreter 
// these #defines are a bunch of purposefully confusing looking early testing
#define xhe0 "xhi1 ="  
#define xhe1() nl ps 
#define xhe12 ( s ) s nl ps 
#define xhi2 ( n ) xhe1( xhe0 ) 1 2 \
            + n @ \
            + p // backslash also works like C #define 
#define xhi2a ( s n ) xhe1( s @ ) 1 2 \
            + n @ \
            + p 
#define xhi01 xhe0 xhe1()
#define xhi1 1 2 + p 
// #define is in the preprocessor vocabulary and can be used anywhere
: sp ; //stack pause ;
 
infixOn
sp
#define xhi0() 1 + 2 p
c_syntaxOn
#define xhii() p (1 + 2) 
#define xhi( n ) ps ( "\nxhi = ") ; 1 + 2 + n ; p()
void
testc1 ( | atoken aword ) 
{
    int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; 
    int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; 
    ps ( "\ntdbg =" ) ; p ( tdbg ) ; 
    ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; 
    ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; //pause () ;
    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; 
    ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; 
    ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; //_pause () ;
    ps ( "\nxhii =" ) ; xhii () ; xhi0(); xhi1 ; xhi( 4 ); xhi01 ; xhi1 ; xhi2(8) ;
}
//'testc1 find wdiss //pause 
testc1 () ; //pause
void
interpret2 ( | atoken aword ) 
{
    //<dbg>
    testc1 () ; xhi01 ; xhi1() ; xhi2 ( 8 ) ; xhi2a ( "xhi2a =", 8 ) ; 
    nl() ; tab () ; ps ( "interpret2 :> " ) ; nl () ;
    while ( 1 )
    {   
        atoken = token () ; 
        printf ( "\n\ttoken = %s", atoken ) ; 
        //_pause () ;
        if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        { 
            //_pause ();
            return ; 
        }
        else
        {
            if ( atoken )
            {       
                aword = tokenToWord ( atoken ) ;
                doWord ( aword ) ;
            }       
        }
    }
}
' interpret2 find wdiss 
sp
interpret2 
c_syntaxOff sp
#if 1
: hi1 1 2 + p ;  
: hey1 hi1 hi1 ; 
: heey1 hey1 hey1 hey1 ;
nl heey1 
#endif
i2halt
"C_Combinators" notUsing
infixOff
sp
#if dbOn @
d: 2 + 7 assertStkChk // stack checking
#else
2 + 7 assertStkChk // stack checking
#endif


