
"\nstarting lisp.cft\n" ddps
5
: sp ; //stack pause ;
Lisp
//"lambda" "_lambda" find alias 
"/\" tick _lambda alias
"/." tick _lambda alias
"/|" tick _lambda alias
// (define list (lambda (args) (args)))

(+ 1 6) nl
'( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) nl
(+ 1 6) ( - ( + 1 2 ( * 3 4 ) ( / 4 2 ) ( - 9 8 ) 10 770 ) 21 )  // == 777
( define f ( lambda x ( + x 1 ) ) ) ( f 6 )
( begin ( define f ( lambda ( x ) ( + x 1 ) ) ) ( f 6 ) )
( + 1 2 4 )

( - ( + 1 2 ( * 3 4 ) ( / 4 2 ) ( - 9 8 ) 10 770 ) 21 )  // == 777 
( ( /\ x y ( + x y ) ) 3 4 )
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) // 77
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) // 77 
nl
( ( /\ ( x y z ) ( + x y z ) ) ((/\ (x y) (+ x y)) 3 4) ((/\ (x y) (+ x y)) 50 10 ) ((/\ (x y) (+ x y)) 8 2 ) )  // 77
( ( /\ ( x y z ) ( + x y z ) ) ((/\ (x y) (/ x y)) 70 10) ((/\ (x y) (- x y)) 93 33 ) ((/\ (x y) (+ x y)) 8 2 ) )  // 77
nl

( define x 7 )
( begin ( define x 2 ) ( + x 5 ) ( define x 14 ) ( / x 2 ) )
( begin ( define f0 ( /\ (x) ( + x 1 ) ) ) ( f0 6 ) )
( define f1 ( /\ (z) ( + z 1 ) ) ) 
tick f1 wdiss
( f1 6 )

( begin ( define f2 ( /\ ( x ) ( + x 3 ) ) ) ( f2 4 ) )
( begin ( define f3 ( /\ ( x ) ( + x 2 ) ) ) ( f3 5 ) )
( define f4 ( /\ ( x ) ( - x 2 ) ) )
( set zs1 77 abc 7 )
(f4 (f3 zs1) ) 
(quote zs1)
( cond 1 7 0 )
( cond 0 0 7 )
( cond ( + 1 1 ) (+ 1 6 ) (+ 1 2 ) )
( cond ( + 0 0 ) ( + 1 2 ) ( + 0 0 ) ( + 1 2 ) ( + 0 0 ) ( + 1 2 ) (+ 1 6 ) )
( cond ( + 0 0 ) ( + 1 0 ) (+ 0 0 ) (+ 1 5 ) 7 )

(define g ( /\ (a b c) (a b c) ) )
(define h ( /\ (a b c) (a c b) ) ) 


tick g wdiss
tick h wdiss
nl

(g + 3 4 ) (g / 14 2 ) 
nl ( h - 4 11 ) ( h - 5 12 ) ( h - 6 13 ) ( h / 9 63 ) ( h / 3 21 ) 
(define h1 ( /\ (c b a) (a b c) ) ) 
(h1 4 11 -) ( h1 5 12 -) ( h1 6 13 -) ( h1 9 63 / ) ( h1 3 21 / ) //pause
nl
((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
// pause
nl
( g + ( g + 1 2 ) ( g + 2 2 ) ) 
( g + ( g * ( g + 3 4 ) ( g + (h - (h - 4 8) 8) 5 ) ) 14 )
( + ( h + 10 5 ) ( g + 7 ( + 3 (g + 4 5) 5) ) ( g + 7 31 ) ) 
(define pd +) (pd 1 2 4)

"\n\nstarting BigFloat\n" ddps
BigFloat

nl ( h - 4 5 ) ( h - 5 4 ) ( h - 6 4 ) ( h / 9 3 ) ( h / 3 9 ) 
( g + ( g - 8 5 ) ( g + 1 3 ) ) 
( h + ( g - 5 8 ) ( g + 3 7 ) ) 
"\nending BigFloat\n" ddps
//pause
bigNumOff

Lisp

using
(define a 3) (define b 4)
' ( a b 1 2 )
nl
(define x ( a b 1 2 )) 
nl
`( 'x x ,x ,@x ) 
nl
(define x '( a b 1 2 ))
`( 'x x ,x ,@x ) 
nl
(set x '( a b 1 2 ))
`( 'x x ,x ,@x ) 
nl // s pause

(set x ( a b 1 2 ))
`( 'x x ,x ,@x ) 
nl
(define y `( 'x x ,x ,@x ) )
`( 'y y ,y ,@y ) 
// pause
"\nlisp test\n" ddps location
(define a 3) (define b 4)
(define y ( a b 1 2 ))
(define x (7 8 9) ) 
(define y ( 1 2 a b 5 6 )) 
nl (y) nl (x) 
`( 'x x ,x ,@x ) nl
// pause 
'( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) nl
( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) nl
// tL


((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
(define x (7 8 9 47))
nl (list 1 2 3 `x) 
nl (list 1 2 3 `,x )
nl (list 1 2 3 x )
nl (list 1 2 3 ,@x )
nl (+ 1 2 3 ,@x)
//pause

(define q1x (lambda (a) (a))) 
(define q2 q1x)
((q2 /) (q2 14) (q2 2)) 
(define q3 q2)
(define q4 q3)
(define q2 q4)
nl 
((q2 +) (q2 28) (q2 2)(q3 2) (q4 45))
nl
( :: : hioo 3 4 + p ; : hio 5 6 + p ; hio hioo ) 
( hioo ) ( hio ) hio hioo 
( :: C : bexp42 ( n ) { n @ 1 > } { n @ n @ -- bexp42 * } { 1 } ifElse ; )
//tick bexp42 wdiss
7 C bexp42 dup 5040 nl _assert p nl
Lisp
( ::
    "\ngoedel4 output : " ps  nl
    : goedel4 ( | n -- TOS ) 
        n 9 =
        { 
            (| n ) n @ p n 2 = n @ dup p 2 _assert0 
            { (| n ) n @ p n 3 = n @ 4 + dup p 7 _assert0 } ix 
            n @ 6 + 8 _assert0 
        } ix
        { (| n ) n @ p n 3 = n @ 4 + 7 _assert0 } ix 
        n @ dup p
    ;
    goedel4 9 _assert0 "\ngoedel4 output should read : \n'anything' 2 'anything' 7 'anything' 9" ps 
) 
#endif
(list (1 2)) (list 1 2)

lispOff 
"\nending lisp.cft\n" ddps
sp 
2 + 7 assertStkChk // stack checking
