
5
: sp ;

#if "_ClassTest_" defined not // prevent including this file twice
"_ClassTest_" var 
Int Logic C
hex
Class
"Pointer" class Pointer.size 4 = // 'size' must be declared else it remains 0; if a :{ ... }; class declaration doesn't immediately follow the class declaration
Class // "class" works like "namespace" so here we switch back to namespace 'Class' else following words would be in class 'Pointer'
"Integer" namespace // Integer.size 4 = doesn't work because a namespace doesn't have 'size' and 'this' variables automatically created
"int16" class int16 size 2 = // 'size' must be declared else it remains 0; ( see above note )
Integer "int32" class int32.size 4 = // 'size' must be declared else it remains 0; ( see above note )
Integer "int64" class int64 size 8 = // 'size' must be declared else it remains 0; ( see above note )
decimal
Integer
Pointer size @ nl "Pointer.size = " prints print nl
Integer size @ nl "Integer size = " prints print nl
int16 size @ nl "int16 size = " prints print nl
Integer "byte" class
byte size 1 =
byte size @ nl "byte size = " prints print nl
Class
"DLLNode" class 
:{ // comment
	Pointer AfterReference   // semicolon is optional and ignored when parsing class code
	Pointer BeforeReference ;
};
DLLNode size @ nl "DLLNode size = " prints Io.print nl
:{ // comment
	Pointer AfterReference   // semicolon is optional and ignored when parsing class code
        int16   someJunkForTesting ; // u can reset the structure representing the class
	Pointer BeforeReference ;
};
DLLNode.size @ nl "DLLNode size = " prints Io.print nl
using
:{ // // again reset the structure representing the class
	Pointer AfterReference   // semicolon is optional and ignored when parsing class code
	Pointer BeforeReference ;
};
DLLNode.size @ nl "DLLNode size = " prints Io.print nl

"testNode" DLLNode new 
testNode.AfterReference 1 =
testNode.BeforeReference 2 =
testNode.size @ dump
DLLNode

"DLList" class
:{
    DLLNode HeadNode ;
    DLLNode TailNode ;
};

: init ( this )
    this.HeadNode.AfterReference this.TailNode.BeforeReference =
    this.TailNode.BeforeReference this.HeadNode.AfterReference =
    this.HeadNode.BeforeReference 1 =
    this.TailNode.AfterReference  2 =
;
' init wdiss
sp
"testList" DLList new 
testList DLList.size @ dump 

this.HeadNode.AfterReference @ this.TailNode.BeforeReference  "class init test : " assert

DLList
using
"DLListClone" clone // clones DLList class
+:{ // adds to the DLList class structure
    int32 Category ;
    Pointer Prototype ;
    int32 Sum ;
    int32 Twelve ;
    int32 Three ;
    int32 Four ;
    int32 Accum ;
}; // add seven elements

"cdbg" 0 constant
: init ( this ) 
#if cdbg 
    <dbg> this.Category 12 =
#else
    this.Category 12 =
#endif
    this.Three 3 = 
    this.Prototype this.Three @ =
    this.Prototype @ dup p 3 "\ntest Prototype should be 3" assert 
    this.Prototype @ p 
    this.Sum 0 =
    this.Four 4 = 
    this.Twelve 12 =
    this.Accum this.Sum @ = 
    this.Sum this.Category @ this.Prototype @ && dup p = 
    this.Accum this.Three @ this.Four @ * this.Three @ / = 
    this.Accum @ 4 "\n DLListClone init : object test1 :" assert 
    this.Prototype @ p 
    this.Sum this.Category @ this.Prototype @ * this.Category @ - = // dup 24  "DLListClone init : object test2 :" assert = 
    this.Sum @ dup hex p 24  "DLListClone init : object test2 :" assert = 
    this.Category @ p // 12
#if cdbg 
    d: this.Prototype @ p // 3
#else
    this.Prototype @ p // 3
#endif
    this.Sum this.Category @ this.Prototype @ * dup p = // 36
    this.Sum this.Category @ this.Prototype @ - dup p = // 9
    this.Sum this.Category @ this.Prototype @ && dup p = // 12 && 3 = 1
    this.Sum this.Category @ this.Prototype @ & dup p = // 12 & 3 = 0
    this.Accum this.Prototype @ =
    this.Sum this.Category @ this.Prototype @ || dup p =
    this.Sum this.Category @ this.Prototype @ / dup p =
    this.Category @ p // 12
    this.Sum @ p // 4
    this.Prototype @ p // 3
    "\n 12 3 36 9 1 0 15 4 12 4 3 : line above should read" ddps
    hex
    "\nthis = " ps this p
    "\nthis @ = " ps this @  p
    "\nthis.size = " ps this.size @ p
    this @ dup p this.size @ dump
    this dup p this.size @ dump
    this.Accum this.Prototype @ dup p =
    this this.size @ dump
    decimal
    this.Accum @ dup p 3 "\n\nAccum should be 3\n" assert // 3
;
//' init wdiss pause
"testClone" DLListClone new 
s 
testClone size @ dump
decimal nl "DLListClone size =" s ps DLListClone size @ dup p nl 44 "Clone size" assert
testClone.TailNode.BeforeReference @ testClone "DLListClone init test : " assert
// test 'this' to refer to 'this' in current namespace
this.TailNode.BeforeReference @ this "DLListClone init test2 : " assert
this.Category @ 12 "DLListClone init test3 : " assert
#endif
dbgVerbosity 2 = 
//logOff
2 + 7 assertStkChk // stack checking



