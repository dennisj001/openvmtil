5 
sp
Root.Int C
// logic test
Logic Bits
sp
: lt 1 2 < p ; lt 
: lt2 1 2 > p ; lt2
// ' lt2 find wdiss

: lnt ( n -- TOS ) n @ 7 < dup p ; ' lnt find wdiss 1 lnt 1 _assert0  7 lnt 0 _assert0 8 lnt 0 _assert0
: lnt2 ( n m -- TOS ) n @ m @ < dup p ; 1 2 lnt2 1 _assert0 2 2 lnt2 0 _assert0 2 1 lnt2 0 _assert0
// ' lnt find wdiss

: lnt3 ( n -- TOS ) n @ 2 == dup p ; 1 lnt3 0 _assert0 2 lnt3 1 _assert0
: lnt4 ( n m -- TOS ) n @ m @ != dup p ; 1 1 lnt4 0 _assert0 2 1 lnt4 1 _assert0

: lnt ( n -- TOS ) n @ 7 <= dup p ; 1 lnt 1 _assert0  7 lnt 1 _assert0 8 lnt 0 _assert0
: lnt2 ( n m -- TOS ) n @ m @ <= dup p ; 1 2 lnt2 1 _assert0 2 2 lnt2 1 _assert0 2 1 lnt2 0 _assert0
: lnt ( n -- TOS ) n @ 7 >= dup p ; 1 lnt 0 _assert0  7 lnt 1 _assert0 8 lnt 1 _assert0
: lnt2 ( n m -- TOS ) n @ m @ >= dup p ; 3 2 lnt2 1 _assert0 2 2 lnt2 1 _assert0 2 3 lnt2 0 _assert0
' lnt2 find wdiss
// pause 
nl
: lnt5 ( n | m ) m 1 = n m == p ; 1 lnt5 2 lnt5
: lnt5 ( n | m ) m 1 = n m <= p ; 1 lnt5 2 lnt5
: lnt5 ( n | m ) m 1 = n m > p ; 2 lnt5 1 lnt5
: lnt5 ( n | m ) m 1 = n m >= p ; 2 lnt5 1 lnt5
: lnt5 ( n | m ) m 1 = m n != p ; 2 lnt5 1 lnt5
// ' lnt6 find wdiss

nl
: lt7 1 1 - not p ; lt7 sp
: lt7b 1 1 + not p ; lt7b sp
: lt8 1 not p ; lt8
sp
: lt9 0 not p ; lt9
: lt10 ( n ) n not p ;
sp  
1 lt10 0 lt10
: tnot ( n -- n ) n @ not dup n store p ;
' tnot find wdiss //pause
1 not 0 _assert0
0 not 1 _assert0
0 tnot 1 _assert0
1 tnot 0 _assert0 
sp
: tnot2 ( n m | v -- v ) n @ m @ | not dup v store p ; // | : to get the compiler to not optimize 
' tnot2 find wdiss 
: tnot3 ( n -- TOS ) n @ not dup p ;
' tnot3 find wdiss
1 tnot3 0 _assert0 
0 0 tnot2 1 _assert0 
1 1 tnot2 0 _assert0
sp
: tAnd ( n m -- TOS ) n @ m @ && dup p ; 
' tAnd find wdiss
1 0 tAnd 0 "1 0" assert 
1 1 tAnd 1 "1 1" assert 
0 0 tAnd 0 "0 0" assert 
0 1 tAnd 0 "0 1" assert 
sp
: tNotAnd ( n m -- TOS ) n @ m @ not && dup p ; 
' tNotAnd find wdiss
1 0 tNotAnd 1 "1 0" assert 
1 1 tNotAnd 0 "1 1" assert 
0 0 tNotAnd 0 "0 0" assert 
0 1 tNotAnd 0 "0 1" assert 

sp
2 + 7 assertStkChk sp // stack checking


