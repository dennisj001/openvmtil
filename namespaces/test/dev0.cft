
bno dbgOff
5
dbOn 0 =
: sp ; //stack pause ;
opOn // this currently requires the optimization to be on to compile correctly 
// verbosity 2 = 
// echoOn
User
"Experimental" namespace
C Bits Experimental 
// constant folding optimization test
: tx 4 2 / 5 + ; tx 7 _assert
// ' tx find wdiss 
Logic 
// test constant folding
: tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ; 
' tx1 find wdiss //pause
tx1 7 _assert
// namespaceTreeWithWords

C
#if 0 // - tail recursion from http://c2.com/cgi/wiki?TailCallOptimization
int factorial ( int n )
{
       int rec1 = 1;
       while ( n >= 2 ) rec1 *= n--;
       return rec1;
}
#endif

: fac ( n  | rec1 -- TOS ) 
    rec1 1 = 
    { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while 
    rec1 @ 
;
// ' fac find wdiss
7 fac dup p 5040 _assert0

// doDemo @ #if
#if 1
: factorial ( REG: n | EAX: rec -- EAX ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while ;
_wdiss ( 'factorial find ) 
7 factorial dup p 5040 "factorial" assert1
#endif
sp
// nl location "\nstarting Lisp\n stack is ..." ddps s
nl location "\nstarting Lisp ..." ddps s
sp
Lisp 
( define g23 ( lambda ( a b c ) ( a b c))) 
tick g23 find wdiss
(g23 + 3 4 ) (g23 / 14 2 ) 
(define q1x0 (/\ (a0) (a0))) 
tick q1x0 find wdiss

((q1x /) 14 2)
(define h01 (lambda (a) (a)))
((h01 /) 14 2)
tick h01 find wdiss

(t+ 1 2 3 1) 
sp
(define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
( average 52 102 )
//tick average find wdiss pause
// TODO : somehow average is not working after startup ?
(+ 1 6)
sp
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
(define fib2 (lambda (n) (ifElse (< n 2) n (+ (fib2 (- n 1)) (fib2 (- n 2))))))
tick fib find wdiss // pause

// pause
(fib 20) (fib2 20)
//pause
(if* 1 7 2)
(+ 2 5)
sp
bno
(define g1 (lambda (a1 b1 c1)(a1 b1 c1))) 
(define g2 (/\(a b c)(a b c))) 
(g + 3 4 )(g / 14 2 )
( define j ( lambda ( a b c ) ( + a b c)))
( define h ( lambda ( a b c ) ( + a b c)))
( define k ( lambda ( a b ) ( + a b )))
nl
( k ( j 1 2 3 ) ( h 2 3 66 ) ) // 77 ...
( + ( k ( j 1 2 3 ) ( h 2 3 66 ) ) ( + 698 2 ) ) // 777
( + ( k ( j 1 2 3 ) ( h 2 3 59 ) ) 7 ) // 77
( g + ( k ( j 1 2 ( h 2 3 ( k 59 4 ) ) ) 6 ) 0 ) // 77
sp
"\nbefore fib" ddps


( - ( + 1 2 ( * 3 4 ) ( / 4 2 ) ( - 9 8 ) 10 770 787 34 ) 21 787 34 )  // == 777
#endif
1 #if // demo : interspersing C code with lisp compiled code
C Compiler
: _fib1 ( n ) { n @ 2 < } { n @  } { n @ -- _fib1 n @ 2 - _fib1 + } ifElse ;
// ' _fib1 find wdiss
20 _fib1 p
sp
#endif
Lisp
//optimizeOff
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
tick fibc find wdiss // have to use 'tick' not ' - remember we are in the Lisp namespace
(fibc 20)
sp
//optimizeOn
(define fibco (lambda ( n ) (ifElse (< n 2) ( n ) (+ (fibco (- n 1)) (fibco (- n 2))))))
tick fibco find wdiss // have to use 'tick' not ' - remember we are in the Lisp namespace
(fibco 20) 
"\nafter fib" ddps nl
sp
lispOff
doDemo @ #if
Compiler C 
: _fib1 ( n ) { n @ 2 < } { n @  } { n @ -- _fib1 n @ 2 - _fib1 + } ifElse ;
// ' _fib1 find wdiss
 20 _fib1 p
c_syntaxOn
int _fib1c ( n ) { if ( n < 2 ) { n ; } else { _fib1c ( n - 1 ) + _fib1c ( n - 2 ) ; } }
c_syntaxOff
' _fib1c find wdiss
20 _fib1c p //pause
dscOn
s: fibPTC? ( n | fn fn1 fn2 -- TOS ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    fn @ 
;s
' fibPTC? find wdiss
20 fibPTC? dup p 6765 _assert0 //pause
dscOff
: fibPTC2? ( n | svn fn fn1 fn2 ) 
    { svn n @ = fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    svn @ p " : " ps fn @ p "," ps
;
sp

#if 1
BigNum
bnInit ( 0 0 )

: tbn ( | n m ) n 0 = m 3 = n m @ += n m @ += n m @ += n @ p ; tbn // should be 9

s: fibBN ( n | svn fn fn1 fn2 -- TOS ) 
    { svn n @ = fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // nl svn @ fprint ":" ps fn @ fprint 
    fn @
;s
sp

: tfib3 ( n | m )  
    "locals fibBN : " ps 
    { m 1 = } { m @ n @ <= } { m 1 +=  } 
    { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } 
    for
;
nl nl 47 tfib3
nl nl 100 tfib3
nl 100 dup p fibBN p //pause
bno
#endif

: test1 ( n -- TOS ) n n @ 3 + = n @ ; //'test1 find wdiss 
4 test1 7 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 - = n @ ; //'test1 find wdiss 
10 test1 7 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 * = n @ ; //'test1 find wdiss 
10 test1 30 _assert0 //pause
: test1 ( n -- TOS ) n n @ 2 / = n @ ; //'test1 find wdiss 
10 test1 5 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 mod = n @ ; //'test1 find wdiss 
5 test1 2 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 & = n @ ; //'test1 find wdiss 
7 test1 3 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 | = n @ ; //'test1 find wdiss 
4 test1 7 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 << = n @ ; //'test1 find wdiss 
1 test1 8 _assert0 //pause
: test1 ( n -- TOS ) n n @ 3 >> = n @ ; //'test1 find wdiss 
8 test1 1 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ + = n @ ; //'test1 find wdiss 
6 2 test1 8 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ + = a @ ; //'test1 find wdiss 
6 2 test1 8 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ - = n @ ; //'test1 find wdiss 
9 2 test1 7 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ - = a @ ; //'test1 find wdiss 
9 2 test1 7 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ + = n @ ; //'test1 find wdiss 
6 2 test1 8 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ + = a @ ; //'test1 find wdiss 
6 2 test1 8 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ * = n @ ; //'test1 find wdiss 
6 2 test1 12 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ << = n @ ; //'test1 find wdiss 
1 3 test1 8 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ >> = n @ ; //'test1 find wdiss 
8 3 test1 1 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ * = a @ ; //'test1 find wdiss 
6 2 test1 12 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ | = n @ ; //'test1 find wdiss 
6 1 test1 7 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ | = a @ ; //'test1 find wdiss 
6 1 test1 7 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ & = n @ ; //'test1 find wdiss 
6 2 test1 2 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ & = a @ ; //'test1 find wdiss 
6 2 test1 2 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ / = n @ ; //'test1 find wdiss 
6 2 test1 3 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ / = a @ ; //'test1 find wdiss 
6 2 test1 3 _assert0 //pause
: test1 ( n m -- TOS ) n n @ m @ mod = n @ ; //'test1 find wdiss 
5 3 test1 2 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ mod = a @ ; //'test1 find wdiss 
5 3 test1 2 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ << = a @ ; //'test1 find wdiss 
1 5 test1 32 _assert0 //pause
: test1 ( n m | a -- TOS ) a n @ m @ >> = a @ ; //'test1 find wdiss 
8 1 test1 4 _assert0 //pause

Int
Lisp
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
// ' fibc2 find wdiss
(fibc2 20)

#endif // testing

(define fibco1 (lambda (n ) (ifElse (< n 2) n (+ (fibco1 (- n 1)) (fibco1 (- n 2))))))
// tick fibco1 find wdiss
(fibco1 20)

(define x7 (7 8 9 45))
nl (list 1 2 3 `x7)
nl (list 1 2 3 `,x7 )
nl (list 1 2 3 x7 )
nl (list 1 2 3 @x7 )
nl (list 1 2 3 ,@x7 )
nl (+ 1 3 4 ,@x7) 
(+ 1 3 4 @x7) 
(+ 1 3 4 `,@x7) 
(define alist (list 1 2 3 ,@x7)) 
//pause

sp
(define yfac (lambda (yy n) (if* (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
tick yfac find wdiss
(yfac yfac 50) nl //pause
(define yfacc (lambda (yyy n1) (if* (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
(define yfac (lambda (yy n) (if* (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
tick yfac find wdiss
(yfac yfac 50) nl //pause
(define yfacc (lambda (yyy n1) (if* (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
sp

(define x "let") (define a "the") // 'let' is a special word
(define x1 'let) (define a1 the)
sp
nl ( Its 'a beautiful day don\'t 'let it get away )
nl '( Its a beautiful day don\'t let it get away )
nl '( Its a beautiful day don\'t @x1 it get away ) 
nl `( ,Its ,a ,beautiful ,day ,don\'t ,@x1 ,it ,get ,away )
nl `( Its ,a beautiful day don\'t ,x it get away )
nl `( Its 'a beautiful day don\'t ,x1 it get away )
nl `( Its a beautiful day don\'t ,@x it get away )
nl `( Its a beautiful day don\'t ,@x1 it get away )
sp
(define ff ( lambda (n) (+ n 1)))
((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
(ff 6)
(average 12 2) 
lispOff 
Lisp
(average 12 2) 
bigNumOff
sp
(define h36 (lambda (a b) (a b a b a a b b)))
(h36 n09 my6 ) 
(define n09 kl0 ) (define my6 op9 )
(h36 n09 my6 )
sp

// macro experiments
( define id (lambda ( x y ) ( x x y y )) )
( id a b ) 
( define id1 ( lambda ( a12 b13 ) ( a12 a12 b13 b13 a12 a12 ) ) )
nl ( id1 7 ( + 5 6 ) )
nl (macro swch ( lambda ( i2 b2 ) ( b2 i2 ) ) )
nl ( swch 7 ( + 5 6 ) )
//dbgOn
( macro swch2 ( lambda ( i2 b2 ) ( (swch b2 i2) (swch b2 i2 ) ) ) )
nl ( swch2 7 ( + 5 6 ) ) sp
//dbgOff
( macro id2 ( lambda ( i2 b2 ) ( ( swch2 b2 i2 ) ( swch2 b2 i2 ) ) ) )
nl ( id2 7 ( + 5 6 ) )
( macro id3 ( lambda ( a12 b13 ) ( a12 a12 b13 a12 b13 b13 a12 a12 ) ) ) 
nl ( id3 7 ( + 5 6 ) )
( macro swch3 ( lambda ( i2 b2 ) ( (swch2 b2 i2) (swch2 b2 i2 ) ) ) )
( macro id4 ( lambda ( a12 b13 ) ( a12 a12 (swch3 a12 b13 ) b13 b13 a12 a12 ) ) ) 
nl ( id4 7 ( + 5 6 ) ) 
// pause
(define x (swch2 3 4) ) 
nl (swch2 3 4) 
(define x (swch 8 15) )  ( - @x) 
(define x (swch 8 19) )  ( - @x) 
nl (car ( 7 8 ) ) ( car 7 8 ) ( cdr ( 6 7 ) ) ( cdr 6 7 )
sp

lispOff
List
_((lambda ( a b) (+ a b)) 3 4 ) dupList eval printList nl printList s lcReset

//logOn
s: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 *  } { 1 } ifElse ;s
dscOn
'bexp3 find wdiss 7 bexp3 p //pause
//logOff
c_syntaxOn
int
fac5 ( REG: n  | EAX: facc -- EAX ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
        facc = facc * n -- ;
    }
}
wdiss ( ' fac5 find ) 
fac5 ( 7 ) p  // pause
dscOff
c_syntaxOff

#if 1
//verbosity 3 =
c_syntaxOn
Root
int cpow ( base power | out ) s{ for ( out = 1 ; power ; ( power -= 1 ) ) { out = out * base ; } return out ; }s 
//int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out ; }
cpow (2 30 ) p
c_syntaxOff
s: pow0 ( base power | out -- TOS ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;s
s: pow ( base power | out -- TOS ) { out 1 = } { power @ 0 > } { power 1 -= } { out out @ base @ * = } for return out @ ;s
//: pow ( base power | out -- TOS ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
2 30 pow0 p //pause
2 30 pow p //pause
scOff
#endif

2 + 7 assertStkChk // stack checking

location "\nending Lisp\n stack is ..." ddps s
// opOff
// demo d: "bexp3" ffx
//pause