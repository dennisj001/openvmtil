5
: sp ; //stack pause ;
sp
#if 1
Root 
"Control" namespace
 Bits Control
// d: "agoto" { "here" label { kbhit dup p } { "end" goto } { 1 p "here" goto } ifElse "end" label 2 p } word
// " agoto { " here label { kbhit dup p } { " end goto } { 1 p " here goto } ifElse " end label 2 p } word
// "aret" { "here" label { kbhit } { return } { 1 p "here" goto } ifElse 2 p } word
// " aret { " here label { kbhit } { return } { 1 p " here goto } ifElse 2 p } word
// x 10 = "abrkcon" { { { kbhit 27 == } { break } { 1 p continue } ifElse 2 p } loop } word
x 10 = : abrkcon { { x @ 0 == } { break } { 1 p x 1 -= continue } ifElse 2 p } loop ;
x 10 = : abrk0 { { x @ p x @ 0 == } { break } { 1 p x 1 -= continue } ifElse 2 p } loop ;
: abrk { { kbhit 0 > } { break } { 1 p } ifElse  } loop ;
: abrk2 { { kbhit 27 == } { break } { 1 p } ifElse 2 p } loop 5 p ;
: abrk3 { 1 } { 1 p } { 0 p } ifElse 2 p ;
: abrk4 { { kbhit 0 > } { break } { continue } ifElse  } loop nl "ok" ps ;
: abrk5 { { kbhit 0 > } { return } { continue } ifElse  } loop nl "ok" ps ;
: abrk6 x 10 = nl "Hit any key : " ps { { kbhit 0 > } { { x @ 0 == } { break } { x 1 -= } ifElse decimal x @ p } { continue } ifElse  } loop nl "ok" ps ;

: leaving ( str n j ) s "leaving" ps str @ ps "n =" ps n @ p "j = " ps j @ p s ;;

: ct0 ( n | j ) 
    nl "ct0 : " ps nl
    { 
        label: hi 
        "ct0 before goto/label works" ps nl 
        goto: leave 
        return 
    } _
    { j 1 = } { j @ 17 <= } { j ++ }
    {
       n @ p j @ p 
       { n @ j @ == } { nl "testing ct0 : goto/label ->" ps goto: hi } { "continuing ct0" ps } ifElse
    }
    for
    label: leave 
    leaving( "ct0" n @ j @) 
;
//'ct0 find wdiss
: ct1 ( n | j ) 
    nl "ct1 : " ps nl
    { j 1 = } { j @ 17 <= } { j ++ }
    {
       n @ p j @ p
       { n @ j @ == } { nl "testing ct1 : goto/label1 ->" ps goto: hi } { "continuing ct1" ps } ifElse
    }
    for
    { { { label: hi "ct1 after nested goto/label1 works" ps nl return } _ } _ } _
;
//'ct1 find wdiss
: ct2 
    nl "ct2 : " ps nl
    { nl "testing ct2 : goto/label2 ->" ps goto: hi } ix
    { label: hi "ct2 after goto/label2 works" ps nl return } _
;
//'ct2 find wdiss
: hic2 ( n ) 
    nl "hic2 : start " ps nl
    s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p 
    nl "hic2 : done " ps nl 
;
'hic2 find wdiss
#if dbOn @ not
7 hic2
#endif
// s pause
Compiler Logic User

: caseSwitchExample ( n ) 
    cr
    { 1 p } 1 case
    { 2 p } 2 case
    { 3 p } 3 case
    { 7 p } 7 case
    n @ switch
; 

// ' caseSwitchExample find wdiss
7 caseSwitchExample

: t0 1 2 > if_ 1 p jmpHere 2 p ; 
: t1 1 2 > if_ 1 p _else_ 2 p _fi ; 
// : t2 1 2 > if_ 1 p jmp jmpHere 2 p _fi jmpHere ; 
: t3 1 2 > if_ 1 p _else_ 2 p _fi ; 
// : t3 1 2 Asm.test {| N ZERO |} jcc 1 p _else_ 2 p _fi ; 
// ' t3 find wdiss
// t3
#endif 
sp
2 + 7 assertStkChk // stack checking
